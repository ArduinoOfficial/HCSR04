#include <Wire.h>

// Declaring some global variables
int gyro_x, gyro_y, gyro_z;
long acc_x, acc_y, acc_z, acc_total_vector;
int temperature;
long gyro_x_cal, gyro_y_cal, gyro_z_cal;
long loop_timer;
int angle_pitch_buffer, angle_roll_buffer;
boolean set_gyro_angles;
float angle_pitch, angle_roll;
float angle_roll_acc, angle_pitch_acc;
float angle_pitch_output, angle_roll_output;

void setup() {
  Serial.begin(57600); // Initialize serial communication at 57600 baud
  Wire.begin(); // Start I2C as master
  pinMode(13, OUTPUT); // Set output 13 (LED) as output

  setup_mpu_6050_registers(); // Setup the registers of the MPU-6050 (500dfs / +/-8g)

  digitalWrite(13, HIGH); // Set digital output 13 high to indicate startup

  Serial.println("MPU-6050 IMU");
  Serial.println("Version: 1.0");
  delay(1500); // Delay 1.5 seconds to display the text

  Serial.println("Calibrating gyro...");
  for (int cal_int = 0; cal_int < 2000; cal_int++) { // Run this code 2000 times
    if (cal_int % 125 == 0) Serial.print("."); // Print a dot every 125 readings
    read_mpu_6050_data(); // Read the raw acc and gyro data from the MPU-6050
    gyro_x_cal += gyro_x; // Add the gyro x-axis offset to the gyro_x_cal variable
    gyro_y_cal += gyro_y; // Add the gyro y-axis offset to the gyro_y_cal variable
    gyro_z_cal += gyro_z; // Add the gyro z-axis offset to the gyro_z_cal variable
    delay(3); // Delay 3us to simulate the 250Hz program loop
  }
  gyro_x_cal /= 2000; // Average offset
  gyro_y_cal /= 2000;
  gyro_z_cal /= 2000;

  digitalWrite(13, LOW); // All done, turn the LED off
  loop_timer = micros(); // Reset the loop timer
}

void loop() {
  read_mpu_6050_data(); // Read the raw acc and gyro data from the MPU-6050

  gyro_x -= gyro_x_cal; // Subtract the calibration value
  gyro_y -= gyro_y_cal;
  gyro_z -= gyro_z_cal;

  // Gyro angle calculations
  angle_pitch += gyro_x * 0.0000611; // Calculate pitch angle
  angle_roll += gyro_y * 0.0000611; // Calculate roll angle

  // Accelerometer angle calculations
  acc_total_vector = sqrt((acc_x * acc_x) + (acc_y * acc_y) + (acc_z * acc_z)); // Total accelerometer vector
  angle_pitch_acc = asin((float)acc_y / acc_total_vector) * 57.296; // Pitch angle
  angle_roll_acc = asin((float)acc_x / acc_total_vector) * -57.296; // Roll angle

  // Complementary filter
  if (set_gyro_angles) {
    angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004; // Correct drift
    angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;
  } else {
    angle_pitch = angle_pitch_acc; // First start
    angle_roll = angle_roll_acc;
    set_gyro_angles = true; // Set the IMU started flag
  }

  // Output the angles to the Serial Monitor
  Serial.print("Pitch: ");
  Serial.print(angle_pitch);
  Serial.print(" Roll: ");
  Serial.println(angle_roll);

  while (micros() - loop_timer < 4000); // Wait until loop_timer reaches 4000us
  loop_timer = micros(); // Reset the loop timer
}

void read_mpu_6050_data() {
  Wire.beginTransmission(0x68); // Start communicating with the MPU-6050
  Wire.write(0x3B); // Send the requested starting register
  Wire.endTransmission(); // End the transmission
  Wire.requestFrom(0x68, 14, true); // Request 14 bytes from the MPU-6050
  while (Wire.available() < 14); // Wait until all bytes are received
  acc_x = Wire.read() << 8 | Wire.read(); // Read accelerometer data
  acc_y = Wire.read() << 8 | Wire.read();
  acc_z = Wire.read() << 8 | Wire.read();
  temperature = Wire.read() << 8 | Wire.read();
  gyro_x = Wire.read() << 8 | Wire.read(); // Read gyro data
  gyro_y = Wire.read() << 8 | Wire.read();
  gyro_z = Wire.read() << 8 | Wire.read();
}

void setup_mpu_6050_registers() {
  // Activate the MPU-6050
  Wire.beginTransmission(0x68);
  Wire.write(0x6B);
  Wire.write(0x00); // Wake up MPU-6050
  Wire.endTransmission();

  // Configure the accelerometer (+/-8g)
  Wire.beginTransmission(0x68);
  Wire.write(0x1C);
  Wire.write(0x10); // Set full scale to +/-8g
  Wire.endTransmission();

  // Configure the gyro (500dps full scale)
  Wire.beginTransmission(0x68);
  Wire.write(0x1B);
  Wire.write(0x08); // Set full scale to 500dps
  Wire.endTransmission();
}
